/**
 * generated by Xtext 2.12.0
 */
package org.anaelchardan.guiexercice.generator;

import com.google.common.collect.Iterables;
import org.anaelchardan.guiexercice.guiexercice.Button;
import org.anaelchardan.guiexercice.guiexercice.Content;
import org.anaelchardan.guiexercice.guiexercice.Frame;
import org.anaelchardan.guiexercice.guiexercice.Label;
import org.anaelchardan.guiexercice.guiexercice.Program;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class GuiexerciceGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    fsa.generateFile("FrameApplication.java", this.generateProgram(IterableExtensions.<Program>head(Iterables.<Program>filter(resource.getContents(), Program.class))));
  }
  
  public CharSequence generateProgram(final Program program) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import javax.swing.JFrame;");
    _builder.newLine();
    _builder.append("import javax.swing.JLabel;");
    _builder.newLine();
    _builder.append("import javax.swing.JButton;");
    _builder.newLine();
    _builder.append("import javax.swing.SwingUtilities;");
    _builder.newLine();
    _builder.append("import java.awt.FlowLayout;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class FrameApplication {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SwingUtilities.invokeLater(new Runnable() {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("public void run() {");
    _builder.newLine();
    _builder.append("            \t        ");
    CharSequence _generateFrame = this.generateFrame(program.getFrame());
    _builder.append(_generateFrame, "            \t        ");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateFrame(final Frame frame) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("JFrame ");
    String _name = frame.getName();
    _builder.append(_name);
    _builder.append(" = new JFrame();");
    _builder.newLineIfNotEmpty();
    _builder.append(" \t");
    String _name_1 = frame.getName();
    _builder.append(_name_1, " \t");
    _builder.append(".setLayout(new FlowLayout());");
    _builder.newLineIfNotEmpty();
    _builder.append(" \t");
    String _name_2 = frame.getName();
    _builder.append(_name_2, " \t");
    _builder.append(".setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); ");
    _builder.newLineIfNotEmpty();
    _builder.append(" \t");
    String _name_3 = frame.getName();
    _builder.append(_name_3, " \t");
    _builder.append(".setTitle(\"");
    String _title = frame.getTitle();
    _builder.append(_title, " \t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append(" \t");
    String _name_4 = frame.getName();
    _builder.append(_name_4, " \t");
    _builder.append(".setSize(");
    int _width = frame.getWidth();
    _builder.append(_width, " \t");
    _builder.append(", ");
    int _height = frame.getHeight();
    _builder.append(_height, " \t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    {
      EList<Content> _contents = frame.getContents();
      for(final Content c : _contents) {
        {
          if ((c instanceof Button)) {
            CharSequence _generateButton = this.generateButton(((Button) c), frame.getContents().indexOf(c), frame.getName());
            _builder.append(_generateButton);
            _builder.newLineIfNotEmpty();
          } else {
            if ((c instanceof Label)) {
              CharSequence _generateLabel = this.generateLabel(((Label) c), frame.getContents().indexOf(c), frame.getName());
              _builder.append(_generateLabel);
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
    }
    _builder.append(" \t");
    String _name_5 = frame.getName();
    _builder.append(_name_5, " \t");
    _builder.append(".setVisible(true);");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateLabel(final Label label, final int index, final String frameName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("JLabel label");
    _builder.append(index);
    _builder.append(" = new JLabel();");
    _builder.newLineIfNotEmpty();
    _builder.append(frameName);
    _builder.append(".add(label");
    _builder.append(index);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("label");
    _builder.append(index);
    _builder.append(".setText(\"");
    String _label = label.getLabel();
    _builder.append(_label);
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateButton(final Button button, final int index, final String frameName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("JButton button");
    _builder.append(index);
    _builder.append(" = new JButton();");
    _builder.newLineIfNotEmpty();
    _builder.append(frameName);
    _builder.append(".add(button");
    _builder.append(index);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("button");
    _builder.append(index);
    _builder.append(".setText(\"");
    String _button = button.getButton();
    _builder.append(_button);
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}

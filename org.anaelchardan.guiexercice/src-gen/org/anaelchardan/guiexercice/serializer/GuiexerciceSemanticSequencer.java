/*
 * generated by Xtext 2.12.0
 */
package org.anaelchardan.guiexercice.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.anaelchardan.guiexercice.guiexercice.Button;
import org.anaelchardan.guiexercice.guiexercice.Frame;
import org.anaelchardan.guiexercice.guiexercice.GuiexercicePackage;
import org.anaelchardan.guiexercice.guiexercice.Label;
import org.anaelchardan.guiexercice.guiexercice.Program;
import org.anaelchardan.guiexercice.services.GuiexerciceGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class GuiexerciceSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GuiexerciceGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GuiexercicePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GuiexercicePackage.BUTTON:
				sequence_Button(context, (Button) semanticObject); 
				return; 
			case GuiexercicePackage.FRAME:
				sequence_Frame(context, (Frame) semanticObject); 
				return; 
			case GuiexercicePackage.LABEL:
				sequence_Label(context, (Label) semanticObject); 
				return; 
			case GuiexercicePackage.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Content returns Button
	 *     Button returns Button
	 *
	 * Constraint:
	 *     button=STRING
	 */
	protected void sequence_Button(ISerializationContext context, Button semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GuiexercicePackage.Literals.BUTTON__BUTTON) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GuiexercicePackage.Literals.BUTTON__BUTTON));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getButtonAccess().getButtonSTRINGTerminalRuleCall_2_0(), semanticObject.getButton());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Frame returns Frame
	 *
	 * Constraint:
	 *     (name=ID (title=STRING | width=INT | height=INT | contents+=Content)*)
	 */
	protected void sequence_Frame(ISerializationContext context, Frame semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Content returns Label
	 *     Label returns Label
	 *
	 * Constraint:
	 *     label=STRING
	 */
	protected void sequence_Label(ISerializationContext context, Label semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GuiexercicePackage.Literals.LABEL__LABEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GuiexercicePackage.Literals.LABEL__LABEL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLabelAccess().getLabelSTRINGTerminalRuleCall_2_0(), semanticObject.getLabel());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Program returns Program
	 *
	 * Constraint:
	 *     frame=Frame
	 */
	protected void sequence_Program(ISerializationContext context, Program semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GuiexercicePackage.Literals.PROGRAM__FRAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GuiexercicePackage.Literals.PROGRAM__FRAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProgramAccess().getFrameFrameParserRuleCall_0(), semanticObject.getFrame());
		feeder.finish();
	}
	
	
}

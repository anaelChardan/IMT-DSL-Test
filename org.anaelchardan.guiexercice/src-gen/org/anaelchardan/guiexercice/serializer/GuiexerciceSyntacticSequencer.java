/*
 * generated by Xtext 2.12.0
 */
package org.anaelchardan.guiexercice.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.anaelchardan.guiexercice.services.GuiexerciceGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class GuiexerciceSyntacticSequencer extends AbstractSyntacticSequencer {

	protected GuiexerciceGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Frame___ContentKeyword_3_3_0_LeftCurlyBracketKeyword_3_3_1_RightCurlyBracketKeyword_3_3_3__a;
	protected AbstractElementAlias match_Frame___ContentKeyword_3_3_0_LeftCurlyBracketKeyword_3_3_1_RightCurlyBracketKeyword_3_3_3__p;
	protected AbstractElementAlias match_Frame___RightCurlyBracketKeyword_3_3_3_ContentKeyword_3_3_0_LeftCurlyBracketKeyword_3_3_1__a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (GuiexerciceGrammarAccess) access;
		match_Frame___ContentKeyword_3_3_0_LeftCurlyBracketKeyword_3_3_1_RightCurlyBracketKeyword_3_3_3__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getFrameAccess().getContentKeyword_3_3_0()), new TokenAlias(false, false, grammarAccess.getFrameAccess().getLeftCurlyBracketKeyword_3_3_1()), new TokenAlias(false, false, grammarAccess.getFrameAccess().getRightCurlyBracketKeyword_3_3_3()));
		match_Frame___ContentKeyword_3_3_0_LeftCurlyBracketKeyword_3_3_1_RightCurlyBracketKeyword_3_3_3__p = new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getFrameAccess().getContentKeyword_3_3_0()), new TokenAlias(false, false, grammarAccess.getFrameAccess().getLeftCurlyBracketKeyword_3_3_1()), new TokenAlias(false, false, grammarAccess.getFrameAccess().getRightCurlyBracketKeyword_3_3_3()));
		match_Frame___RightCurlyBracketKeyword_3_3_3_ContentKeyword_3_3_0_LeftCurlyBracketKeyword_3_3_1__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getFrameAccess().getRightCurlyBracketKeyword_3_3_3()), new TokenAlias(false, false, grammarAccess.getFrameAccess().getContentKeyword_3_3_0()), new TokenAlias(false, false, grammarAccess.getFrameAccess().getLeftCurlyBracketKeyword_3_3_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Frame___ContentKeyword_3_3_0_LeftCurlyBracketKeyword_3_3_1_RightCurlyBracketKeyword_3_3_3__a.equals(syntax))
				emit_Frame___ContentKeyword_3_3_0_LeftCurlyBracketKeyword_3_3_1_RightCurlyBracketKeyword_3_3_3__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Frame___ContentKeyword_3_3_0_LeftCurlyBracketKeyword_3_3_1_RightCurlyBracketKeyword_3_3_3__p.equals(syntax))
				emit_Frame___ContentKeyword_3_3_0_LeftCurlyBracketKeyword_3_3_1_RightCurlyBracketKeyword_3_3_3__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Frame___RightCurlyBracketKeyword_3_3_3_ContentKeyword_3_3_0_LeftCurlyBracketKeyword_3_3_1__a.equals(syntax))
				emit_Frame___RightCurlyBracketKeyword_3_3_3_ContentKeyword_3_3_0_LeftCurlyBracketKeyword_3_3_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('content' '{' '}')*
	 *
	 * This ambiguous syntax occurs at:
	 *     contents+=Content '}' (ambiguity) 'height' ':' height=INT
	 *     contents+=Content '}' (ambiguity) 'title' ':' title=STRING
	 *     contents+=Content '}' (ambiguity) 'width' ':' width=INT
	 *     contents+=Content '}' (ambiguity) '}' (rule end)
	 *     height=INT (ambiguity) 'height' ':' height=INT
	 *     height=INT (ambiguity) 'title' ':' title=STRING
	 *     height=INT (ambiguity) 'width' ':' width=INT
	 *     height=INT (ambiguity) '}' (rule end)
	 *     name=ID '{' (ambiguity) 'height' ':' height=INT
	 *     name=ID '{' (ambiguity) 'title' ':' title=STRING
	 *     name=ID '{' (ambiguity) 'width' ':' width=INT
	 *     title=STRING (ambiguity) 'height' ':' height=INT
	 *     title=STRING (ambiguity) 'title' ':' title=STRING
	 *     title=STRING (ambiguity) 'width' ':' width=INT
	 *     title=STRING (ambiguity) '}' (rule end)
	 *     width=INT (ambiguity) 'height' ':' height=INT
	 *     width=INT (ambiguity) 'title' ':' title=STRING
	 *     width=INT (ambiguity) 'width' ':' width=INT
	 *     width=INT (ambiguity) '}' (rule end)
	 */
	protected void emit_Frame___ContentKeyword_3_3_0_LeftCurlyBracketKeyword_3_3_1_RightCurlyBracketKeyword_3_3_3__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('content' '{' '}')+
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID '{' (ambiguity) '}' (rule end)
	 */
	protected void emit_Frame___ContentKeyword_3_3_0_LeftCurlyBracketKeyword_3_3_1_RightCurlyBracketKeyword_3_3_3__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('}' 'content' '{')*
	 *
	 * This ambiguous syntax occurs at:
	 *     contents+=Content (ambiguity) contents+=Content
	 *     height=INT 'content' '{' (ambiguity) contents+=Content
	 *     name=ID '{' 'content' '{' (ambiguity) contents+=Content
	 *     title=STRING 'content' '{' (ambiguity) contents+=Content
	 *     width=INT 'content' '{' (ambiguity) contents+=Content
	 */
	protected void emit_Frame___RightCurlyBracketKeyword_3_3_3_ContentKeyword_3_3_0_LeftCurlyBracketKeyword_3_3_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}

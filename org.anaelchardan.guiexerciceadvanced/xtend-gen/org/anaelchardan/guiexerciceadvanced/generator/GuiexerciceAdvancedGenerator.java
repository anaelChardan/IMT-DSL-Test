/**
 * generated by Xtext 2.12.0
 */
package org.anaelchardan.guiexerciceadvanced.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import org.anaelchardan.guiexerciceadvanced.guiexerciceAdvanced.Button;
import org.anaelchardan.guiexerciceadvanced.guiexerciceAdvanced.Content;
import org.anaelchardan.guiexerciceadvanced.guiexerciceAdvanced.Frame;
import org.anaelchardan.guiexerciceadvanced.guiexerciceAdvanced.Label;
import org.anaelchardan.guiexerciceadvanced.guiexerciceAdvanced.Program;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class GuiexerciceAdvancedGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    fsa.generateFile("FrameApplicationAdvanced.java", this.generateProgram(IterableExtensions.<Program>head(Iterables.<Program>filter(resource.getContents(), Program.class))));
  }
  
  public CharSequence generateProgram(final Program program) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import javax.swing.JFrame;");
    _builder.newLine();
    _builder.append("import javax.swing.JLabel;");
    _builder.newLine();
    _builder.append("import javax.swing.JButton;");
    _builder.newLine();
    _builder.append("import javax.swing.SwingUtilities;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.awt.FlowLayout;");
    _builder.newLine();
    _builder.append("import java.awt.event.ActionEvent; ");
    _builder.newLine();
    _builder.append("import java.awt.event.ActionListener;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class FrameApplication {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SwingUtilities.invokeLater(new Runnable() {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("public void run() {");
    _builder.newLine();
    _builder.append("            \t        ");
    CharSequence _generateFrames = this.generateFrames(program.getFrames());
    _builder.append(_generateFrames, "            \t        ");
    _builder.newLineIfNotEmpty();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateFrames(final EList<Frame> frames) {
    StringConcatenation _builder = new StringConcatenation();
    {
      for(final Frame frame : frames) {
        _builder.append("JFrame ");
        String _name = frame.getFrameName().getName();
        _builder.append(_name);
        _builder.append(" = new JFrame();");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    {
      for(final Frame frame_1 : frames) {
        CharSequence _generateFrame = this.generateFrame(frame_1, frames);
        _builder.append(_generateFrame);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    String _name_1 = frames.get(0).getFrameName().getName();
    _builder.append(_name_1);
    _builder.append(".setVisible(true);");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateFrame(final Frame frame, final EList<Frame> frames) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = frame.getFrameName().getName();
    _builder.append(_name);
    _builder.append(".setLayout(new FlowLayout());");
    _builder.newLineIfNotEmpty();
    String _name_1 = frame.getFrameName().getName();
    _builder.append(_name_1);
    _builder.append(".setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); ");
    _builder.newLineIfNotEmpty();
    String _name_2 = frame.getFrameName().getName();
    _builder.append(_name_2);
    _builder.append(".setTitle(\"");
    String _title = frame.getTitle();
    _builder.append(_title);
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    String _name_3 = frame.getFrameName().getName();
    _builder.append(_name_3);
    _builder.append(".setSize(");
    int _width = frame.getWidth();
    _builder.append(_width);
    _builder.append(", ");
    int _height = frame.getHeight();
    _builder.append(_height);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    {
      EList<Content> _contents = frame.getContents();
      for(final Content c : _contents) {
        {
          if ((c instanceof Button)) {
            CharSequence _generateButton = this.generateButton(((Button) c), frame.getContents().indexOf(c), frame.getFrameName().getName(), frames);
            _builder.append(_generateButton);
            _builder.newLineIfNotEmpty();
          } else {
            if ((c instanceof Label)) {
              CharSequence _generateLabel = this.generateLabel(((Label) c), frame.getContents().indexOf(c), frame.getFrameName().getName());
              _builder.append(_generateLabel);
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence generateLabel(final Label label, final int index, final String frameName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("JLabel label");
    _builder.append(frameName);
    _builder.append(index);
    _builder.append(" = new JLabel();");
    _builder.newLineIfNotEmpty();
    _builder.append(frameName);
    _builder.append(".add(label");
    _builder.append(frameName);
    _builder.append(index);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("label");
    _builder.append(frameName);
    _builder.append(index);
    _builder.append(".setText(\"");
    String _label = label.getLabel();
    _builder.append(_label);
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateButton(final Button button, final int index, final String frameName, final EList<Frame> frames) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("JButton button");
    _builder.append(frameName);
    _builder.append(index);
    _builder.append(" = new JButton();");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("button");
    _builder.append(frameName);
    _builder.append(index);
    _builder.append(".addActionListener(new ActionListener(){");
    _builder.newLineIfNotEmpty();
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("public void actionPerformed(ActionEvent e) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    String _name = button.getTo().getName();
    _builder.append(_name, "\t");
    _builder.append(".setVisible(true); ");
    _builder.newLineIfNotEmpty();
    {
      for(final Frame frame : frames) {
        {
          String _name_1 = frame.getFrameName().getName();
          String _name_2 = button.getTo().getName();
          boolean _notEquals = (!Objects.equal(_name_1, _name_2));
          if (_notEquals) {
            _builder.append("\t");
            String _name_3 = frame.getFrameName().getName();
            _builder.append(_name_3, "\t");
            _builder.append(".setVisible(false);");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("} ");
    _builder.newLine();
    _builder.append("});");
    _builder.newLine();
    _builder.newLine();
    _builder.append(frameName);
    _builder.append(".add(button");
    _builder.append(frameName);
    _builder.append(index);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("button");
    _builder.append(frameName);
    _builder.append(index);
    _builder.append(".setText(\"");
    String _button = button.getButton();
    _builder.append(_button);
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}
